#!/bin/bash -e

# The configure hook is called every time one the following actions happen:
# - initial snap installation
# - snap refresh
# - whenever the user runs snap set|unset to change a configuration option

source $SNAP/usr/bin/utils.sh

$SNAP/usr/bin/configure_hook_ros.sh

# Function to validate the option values
validate_option() {
  local OPT=$1
  local VALID_OPTIONS=("${!2}")

  VALUE="$(snapctl get driver.${OPT})"

  # Create an associative array to check valid options
  declare -A valid_options_map
  for option in "${VALID_OPTIONS[@]}"; do
    valid_options_map["$option"]=1
  done

  # Join the valid options with newlines
  JOINED_OPTIONS=$(printf "%s\n" "${VALID_OPTIONS[@]}")

  if [ -n "${VALUE}" ]; then
    if [[ -z "${valid_options_map[$VALUE]}" ]]; then
      log_and_echo "'${VALUE}' is not a supported value for '${OPT}'. Possible values are:\n${JOINED_OPTIONS}"
      exit 1
    fi
  fi
}

# Define the valid options for camera model and lidar model
VALID_CAMERA_OPTIONS=("None" "intel_realsense_d435" "orbbec_astra" "stereolabs_zed" "stereolabs_zedm" "stereolabs_zed2" "stereolabs_zed2i" "stereolabs_zedx" "stereolabs_zedxm")
VALID_LIDAR_OPTIONS=("None" "slamtec_rplidar_a2" "slamtec_rplidar_a3" "slamtec_rplidar_s1" "slamtec_rplidar_s2" "slamtec_rplidar_s3" "velodyne_puck")
VALID_BOOLEAN_OPTIONS=("True" "False")

# Validate parameters with array of possible values
validate_option "camera-model" VALID_CAMERA_OPTIONS[@]
validate_option "lidar-model" VALID_LIDAR_OPTIONS[@]
validate_option "mecanum" VALID_BOOLEAN_OPTIONS[@]
validate_option "include-camera-mount" VALID_BOOLEAN_OPTIONS[@]

# Make sure the serial-port value is valid
OPT="serial-port"
VALUE="$(snapctl get ${OPT})"

if [ "${VALUE}" != "auto" ] && [ ! -e "${VALUE}" ]; then
  log_and_echo "'${VALUE}' is not a valid value for '${OPT}'. It must be 'auto' or a valid serial port in the /dev/ directory."
  exit 1
fi

# Get the transport setting using snapctl
OPT="webui.layout"
LAYOUT="$(snapctl get ${OPT})"

# Only exit with status 1 if conditions are not met
if [ ! -f "${SNAP_COMMON}/foxglove-${LAYOUT}.json" ]; then
  log_and_echo "'${SNAP_COMMON}/foxglove-${LAYOUT}.json' does not exist."
  exit 1
fi

# Make sure WEBUI_PORT is valid
OPT="webui.port"
WEBUI_PORT="$(snapctl get ${OPT})"

if ! is_integer "${WEBUI_PORT}" || [ "${WEBUI_PORT}" -lt 0 ] || [ "${WEBUI_PORT}" -gt 65535 ] || [ "${WEBUI_PORT}" -eq 3000 ] || [ "${WEBUI_PORT}" -eq 8888 ]; then
  log_and_echo "'${WEBUI_PORT}' is not a supported value for '${OPT}'. Possible values are integers between 0 and 65535, excluding 3000 and 8888."
  exit 1
fi

# restart services with new ROS 2 config
for service in daemon web-ui web-ws; do
  if snapctl services ${SNAP_NAME}.${service} | grep -qw active; then
    snapctl restart ${SNAP_NAME}.${service}
    log "Restarted ${SNAP_NAME}.${service}"
  fi
done
