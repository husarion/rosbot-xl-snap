#!/bin/bash -e

# The configure hook is called every time one the following actions happen:
# - initial snap installation
# - snap refresh
# - whenever the user runs snap set|unset to change a configuration option

source $SNAP/usr/bin/utils.sh

# Define the top-level key and the list of valid keys
VALID_DRIVER_KEYS=("mecanum" "include-camera-mount" "camera-model" "lidar-model" "db-serial-port" "manipulator-serial-port" )
VALID_WEBUI_KEYS=("layout" "port")

# Call the validation function
validate_keys "driver" VALID_DRIVER_KEYS[@]
validate_keys "webui" VALID_WEBUI_KEYS[@]

# Define the valid options for camera model and lidar model
VALID_CAMERA_OPTIONS=("None" "intel_realsense_d435" "orbbec_astra" "stereolabs_zed" "stereolabs_zedm" "stereolabs_zed2" "stereolabs_zed2i" "stereolabs_zedx" "stereolabs_zedxm")
VALID_LIDAR_OPTIONS=("None" "slamtec_rplidar_a2" "slamtec_rplidar_a3" "slamtec_rplidar_s1" "slamtec_rplidar_s2" "slamtec_rplidar_s3" "velodyne_puck")
VALID_BOOLEAN_OPTIONS=("True" "False")

# Validate parameters with array of possible values
validate_option "driver.camera-model" VALID_CAMERA_OPTIONS[@]
validate_option "driver.lidar-model" VALID_LIDAR_OPTIONS[@]
validate_option "driver.mecanum" VALID_BOOLEAN_OPTIONS[@]
validate_option "driver.include-camera-mount" VALID_BOOLEAN_OPTIONS[@]

# Validate specific serial ports
validate_serial_port "driver.db-serial-port"
validate_serial_port "driver.manipulator-serial-port"

# Get the transport setting using snapctl
OPT="webui.layout"
LAYOUT="$(snapctl get ${OPT})"

# Only exit with status 1 if conditions are not met
if [ ! -f "${SNAP_COMMON}/foxglove-${LAYOUT}.json" ]; then
  log_and_echo "'${SNAP_COMMON}/foxglove-${LAYOUT}.json' does not exist."
  exit 1
fi

# Make sure WEBUI_PORT is valid
EXCLUDED_PORTS=(3000 8888)
SUPPORTED_RANGE=(0 65535)

# Validate a specific port, for example, webui.port
validate_number "webui.port" SUPPORTED_RANGE[@] EXCLUDED_PORTS[@]

VALID_CONFIGURATION_OPTIONS=("basic" "manipulation")

# Validate parameters with array of possible values
validate_option "configuration" VALID_CONFIGURATION_OPTIONS[@]

OPT="configuration"
VALUE="$(snapctl get ${OPT})"
if [ "${VALUE}" == "manipulation" ]; then
  log_and_echo "Currently the 'ros.namespace', 'driver.include-camera-mount' and 'driver.camera-model' are not supported for the 'manipulation' option. Unsetting them."
  snapctl set ros.namespace!
  snapctl set driver.camera-model=None
  snapctl set driver.include-camera-mount=False
fi

# moved to the end because for manipulator we usnet ros.namespace
$SNAP/usr/bin/configure_hook_ros.sh

# restart services with new ROS 2 config
for service in daemon web-ui web-ws joy teleop_twist_joy; do
  if snapctl services ${SNAP_NAME}.${service} | grep -qw enabled; then
    snapctl restart ${SNAP_NAME}.${service}
    log "Restarted ${SNAP_NAME}.${service}"
  fi
done
