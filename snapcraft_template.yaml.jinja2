name: rosbot-xl
adopt-info: rosbot-xl
license: Apache-2.0
summary: A driver for ROSbot XL mobile robot
icon: snap/gui/rosbot-xl.png
description: |
  The **rosbot-xl** snap includes all the essential software required to operate the ROSbot XL, including the controller, robot state publisher, and more.
  
  **Installation**

  To install this snap on the Single Board Computer (SBC) within the ROSbot XL chassis, follow these steps:

  1. Connect the SBC to the Digital Board inside ROSbot XL using an Ethernet cable.
  2. Configure the Ethernet Interface with the static IP address `192.168.77.2`.
  3. Run the following command to install the snap:

     snap install rosbot-xl

  **Parameters**

  The snap provides the following configurable parameters (`param name`: `default value`):

  * `configuration`: `basic` - presets for ROSbot XL
  * `driver`: `{...}`
  * `ros`: `{...}`
  * `webui`: `{...}`

  The `configuration` key can be set to `basic` or `manipulation` (for ROSbot XL with OpenManipulator-X).

  The `ros` contains the following keys:

  * `ros.domain-id`: `0` - Sets the `ROS_DOMAIN_ID` environment variable for the ROS driver.
  * `ros.localhost-only`: `0` - Sets the `ROS_LOCALHOST_ONLY` environment variable for the ROS driver.
  * `ros.transport`: `udp` - Configures DDS transport. Options are `udp`, `shm`, `builtin` (or `rmw_fastrtps_cpp`), `rmw_cyclonedds_cpp`. Corresponding DDS XML files can be found in the `/var/snap/rosbot-xl/common` directory (custom FastDDS setups can also be created here).
  * `ros.namespace`: `(unset)` - Namespace for all topics and transforms.

  The `driver` contains the following keys:

  * `driver.mecanum`: `True` - Enables the mecanum drive controller; otherwise, uses the differential drive controller.
  * `driver.include-camera-mount`: `True` - Includes the camera mount in the robot URDF.
  * `driver.camera-model`: `None` - Adds the camera model to the robot URDF.
  * `driver.lidar-model`: `None` - Adds the LIDAR model to the robot URDF.
  * `driver.db-serial-port`: `auto` - Serial port for firmware (e.g., `/dev/ttyUSB0`), or set it to `auto`.
  * `driver.manipulator-serial-port`: `auto` - Serial port for OpenManipulator-X (e.g., `/dev/ttyUSB0`), or set it to `auto`.

  The `webui` contains the following keys:

  * `webui.layout`: `default` - Specifies the layout for the Web UI. Available `*.json` layout files can be found in the `/var/snap/rosbot-xl/common` directory (custom layouts can also be created here).
  * `webui.port`: `8080` - Specifies the port for the built-in web server hosting the Web UI.

  To set parameters, use the snap set command, e.g.,

     snap set rosbot-xl driver.mecanum=True

  **Available Apps (Main)**

  * `rosbot-xl.flash` - Flash firmware for the STM32F4 microcontroller.
  * `rosbot-xl.start` - Start the daemon running the ROSbot XL ROS 2 driver.
  * `rosbot-xl.stop` - Stop the daemon running the ROSbot XL ROS 2 driver.
  * `rosbot-xl.start-web-ui` - Start the daemon running the Web UI (available at `http://<ROBOT_IP>:8080/ui` by default).
  * `rosbot-xl.stop-web-ui` - Stop the daemon running the Web UI.
  * `rosbot-xl.teleop` - Run the `teleop_twist_keyboard` node to control the robot from a terminal.

  **Auxiliary Apps**

  * `rosbot-xl.config-ftdi` - Set up the CBUS pins in the FTDI chip (used with RST and BOOT0 pins in STM32); needs to be done only once.
  * `rosbot-xl.print-serial-number` - Print the CPU ID and serial number of ROSbot XL.
  * `rosbot-xl.reset-stm32` - Reset the STM32F4 microcontroller.

  **Working with ROS Parameters**

  For multiple snaps running ROS 2 or host-snap-Docker communication, useful files and scripts are available in `/var/snap/rosbot-xl/common/`.

  Example usage:

     # Set parameters in the rosbot-xl snap
     sudo snap set rosbot-xl transport=udp ros-domain-id=123 ros.namespace=abc

     # Mirror the setup for other ROS 2 snaps
     sudo snap set husarion-depthai $(cat /var/snap/rosbot-xl/common/ros_snap_args)
     ...

     # Set up the current shell with the same configurations
     source /var/snap/rosbot-xl/common/ros.env

     # Install configurations with
     /var/snap/rosbot-xl/common/manage_ros_env.sh
     source ~/.bashrc

     ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args --remap __ns:=/${ROS_NAMESPACE}

# Additional info:
#   **Notes**

#   * `rosbot-xl.daemon` runs as the `root` user. To enable shared-memory communication (`ros-localhost-only=1` or `transport` set to `shm` or `builtin`), ensure the user on the host (or in Docker) is also `root`.
#   * To run the ROS 2 driver in the current terminal session (and enable shared memory communication with a non-root user):

#      sudo rosbot-xl.stop
#      rosbot-xl

#   * Display logs from the ROS 2 node with:

#      sudo snap logs rosbot-xl.daemon

#   * Display logs from the snap logger with:
     
#      journalctl -t rosbot-xl

#   * `rosbot-xl` snap by default uses the following ports: `3000` by the safe-shutdown service, `8888` by microROS Agent, `8080` by a Web UI.

grade: stable
confinement: strict
base: {{ 'core22' if ros_distro == 'humble' else 'core24' }}

contact: https://github.com/husarion/rosbot-xl-snap/issues
issues: https://github.com/husarion/rosbot-xl-snap/issues
website: https://husarion.com/manuals/rosbot-xl/overview/

slots:
  shm-slot:
    interface: shared-memory
    write: ['*'] # paths are relative to /dev/shm

plugs:
  shm-plug:
    interface: shared-memory
    shared-memory: shm-slot
    private: false

apps:

  daemon:
    command: usr/bin/launcher.sh
    command-chain: [usr/bin/ros_setup.sh]
    daemon: simple
    install-mode: enable
    plugs: [network, network-bind, shm-plug, raw-usb]
    slots: [shm-slot]
    extensions: [ros2-{{ ros_distro }}-ros-base]

  db-server:
    command: usr/bin/db_server_launcher.sh
    daemon: simple
    install-mode: enable
    plugs: [network, network-bind, shutdown]

  rosbot-xl:
    command: usr/bin/launcher.sh
    command-chain: [usr/bin/check_daemon_running.sh, usr/bin/ros_setup.sh]
    plugs: [network, network-bind, shm-plug, raw-usb]
    slots: [shm-slot]
    extensions: [ros2-{{ ros_distro }}-ros-base]

  flash:
    command: usr/bin/flash_launcher.sh
    plugs: [raw-usb, network-bind]
    extensions: [ros2-{{ ros_distro }}-ros-base]

  teleop:
    command: usr/bin/teleop_launcher.sh
    command-chain: [usr/bin/ros_setup.sh]
    plugs: [network, network-bind, shm-plug]
    slots: [shm-slot]
    extensions: [ros2-{{ ros_distro }}-ros-base]

  joy:
    command: usr/bin/joy_launcher.sh
    command-chain: [usr/bin/ros_setup.sh]
    daemon: simple
    install-mode: enable
    environment:
      LD_LIBRARY_PATH: "$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/pulseaudio:$LD_LIBRARY_PATH"
    plugs: [hardware-observe, joystick, network, network-bind, shm-plug]
    slots: [shm-slot]
    extensions: [ros2-{{ ros_distro }}-ros-base]

  arm-activate:
    command: usr/bin/arm_activate_launcher.sh active
    command-chain: [usr/bin/ros_setup.sh]
    plugs: [network, network-bind, shm-plug]
    slots: [shm-slot]
    extensions: [ros2-{{ ros_distro }}-ros-base]
    
  arm-disactivate:
    command: usr/bin/arm_activate_launcher.sh inactive
    command-chain: [usr/bin/ros_setup.sh]
    plugs: [network, network-bind, shm-plug]
    slots: [shm-slot]
    extensions: [ros2-{{ ros_distro }}-ros-base]

  print-serial-number:
    command: usr/bin/serial_number_launcher.sh
    command-chain: [usr/bin/ros_setup.sh]
    plugs: [network, network-bind, shm-plug]
    slots: [shm-slot]
    extensions: [ros2-{{ ros_distro }}-ros-base]

  start:
    command: usr/bin/start_launcher.sh

  stop:
    command: usr/bin/stop_launcher.sh

  restart:
    command: usr/bin/restart_launcher.sh

  reset-stm32:
    command: usr/bin/reset_stm32_launcher.sh
    plugs: [raw-usb, network-bind]

  config-ftdi:
    command: usr/bin/ftdi_eeprom_conf_launcher.sh
    plugs: [raw-usb, network-bind]

parts:
  # rosbot-xl:
  #   plugin: colcon
  #   source: https://github.com/husarion/rosbot_xl_ros.git
  #   source-branch: "0.11.5"
  #   build-packages: 
  #     - python3-vcstool
  #   stage-packages: 
  #     - stm32flash
  #     - libusb-1.0-0
  #     - usbutils
  #     - ros-{{ ros_distro }}-rmw-cyclonedds-cpp
  #   override-pull: |
  #     craftctl default

  #     vcs import $CRAFT_PART_SRC < $CRAFT_PART_SRC/rosbot_xl/rosbot_xl_hardware.repos
  #     cp -r $CRAFT_PART_SRC/ros2_controllers/diff_drive_controller $CRAFT_PART_SRC/
  #     cp -r $CRAFT_PART_SRC/ros2_controllers/imu_sensor_broadcaster $CRAFT_PART_SRC/
  #     rm -rf $CRAFT_PART_SRC/ros2_controllers
  #     rm -r $CRAFT_PART_SRC/rosbot_xl_gazebo
  #     # Ignore so that rosdep doesn't pull deps
  #     # and colcon doesn't build
  #     # touch $CRAFT_PART_SRC/rosbot_xl_gazebo/COLCON_IGNORE

  #     # Set the snap version from the git tag
  #     # The grade is set to 'stable' if the latest entry in the git history
  #     # is the tag itself, otherwise set to devel
  #     version="$(git describe --always --tags| sed -e 's/^v//;s/-/+git/;y/-/./')"
  #     [ -n "$(echo $version | grep "+git")" ] && grade=devel || grade=stable
  #     craftctl set version="$version"
  #     craftctl set grade="$grade"

  rosbot-xl:
    plugin: colcon
    source: https://github.com/husarion/rosbot_xl_manipulation_ros.git
    source-branch: "1.1.2"
    build-packages: 
      - python3-vcstool
      - python3-ftdi
    stage-packages: 
      - stm32flash
      - libusb-1.0-0
      - usbutils
      - python3-ftdi
      - ros-{{ ros_distro }}-rmw-cyclonedds-cpp
    override-pull: |
      craftctl default

      vcs import $CRAFT_PART_SRC < $CRAFT_PART_SRC/rosbot_xl_manipulation/rosbot_xl_manipulation.repos
      vcs import $CRAFT_PART_SRC < $CRAFT_PART_SRC/rosbot_xl_ros/rosbot_xl/rosbot_xl_hardware.repos
      vcs import $CRAFT_PART_SRC < $CRAFT_PART_SRC/open_manipulator_x/open_manipulator_x.repos

      cp -r $CRAFT_PART_SRC/ros2_controllers/diff_drive_controller $CRAFT_PART_SRC/
      cp -r $CRAFT_PART_SRC/ros2_controllers/imu_sensor_broadcaster $CRAFT_PART_SRC/
      rm -rf $CRAFT_PART_SRC/ros2_controllers
      rm -r $CRAFT_PART_SRC/rosbot_xl_ros/rosbot_xl_gazebo
      rm -r $CRAFT_PART_SRC/rosbot_xl_manipulation_gazebo
      # Ignore so that rosdep doesn't pull deps
      # and colcon doesn't build
      # touch $CRAFT_PART_SRC/rosbot_xl_gazebo/COLCON_IGNORE

      # Set the snap version from the git tag
      # The grade is set to 'stable' if the latest entry in the git history
      # is the tag itself, otherwise set to devel
      version="$(git describe --always --tags| sed -e 's/^v//;s/-/+git/;y/-/./')"
      [ -n "$(echo $version | grep "+git")" ] && grade=devel || grade=stable
      craftctl set version="$version"
      craftctl set grade="$grade"

  teleop:
    plugin: nil
    stage-packages:
      - ros-{{ ros_distro }}-teleop-twist-keyboard
      # - ros-{{ ros_distro }}-teleop-twist-joy # 2024-09-13: in apt repository is 2.6.0 version, and stamped messages were introduced in 2.6.1 (https://github.com/ros2/teleop_twist_joy)

  # after version 2.6.1+ will be available in apt repository, remove it:
  teleop-twist-joy:
    plugin: colcon
    source: https://github.com/ros2/teleop_twist_joy.git
    stage:
      - "-opt/ros/snap/local_setup.sh"
      - "-opt/ros/snap/setup.bash"
      - "-opt/ros/snap/setup.ps1"
      - "-opt/ros/snap/setup.sh"
      - "-opt/ros/snap/setup.zsh"

  db-server:
    plugin: nil
    stage-packages:
      - dbus
      - curl
      - netcat

  husarion-snap-common:
    plugin: dump
    source: https://github.com/husarion/husarion-snap-common
    source-branch: "0.5.0"
    source-type: git
    build-environment:
      - YQ_VERSION: "v4.35.1"
    build-packages:
      - curl
    organize:
      'local-ros/*.sh': usr/bin/
      'local-ros/*.xml': usr/share/husarion-snap-common/config/
      'local-ros/ros.env': usr/share/husarion-snap-common/config/
    override-build: |
      craftctl default
      curl -L "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_${CRAFT_ARCH_BUILD_FOR}" -o $CRAFT_PART_BUILD/yq
    override-prime: |
      craftctl default
      cp $CRAFT_PART_BUILD/yq $CRAFT_PRIME/usr/bin/yq
      chmod +x $CRAFT_PRIME/usr/bin/yq
      rm -rf $CRAFT_PRIME/local-ros
    stage:
      - "-usr/bin/start_launcher.sh"
      - "-usr/bin/stop_launcher.sh"
      - "-usr/bin/restart_launcher.sh"

  local-files:
    plugin: dump
    source: snap/local/
    organize:
      '*.sh': usr/bin/
      '*.py': usr/bin/
      '*.yaml': usr/share/rosbot-xl/config/
      '*.xml': usr/share/rosbot-xl/config/
